- content_for :head do
  %title BigTuna - Continuous Integration - Configuration

.page-header
  %h1
    Configuration

%section
  %h2 Setting up a project

  %p
    On the homepage, click “New project” on the menu.

    %ul
      %li <strong>Name</strong> should be a globally unique project name like “My Project master”
      %li <strong>Vcs type</strong> version control software you are using. Git is the only choice for now, but you can <a href="contributing.html#vcs">contribute with your own <span class="caps">VCS</span> handler</a>
      %li <strong>Vcs source</strong> the source to the version control repository. Read the <a href="#vcs"><span class="caps">VCS</span> section</a> for info
      %li <strong>Vcs branch</strong> the branch to work on
      %li <strong>Max builds</strong> BigTuna will keep only latest max_builds builds (default: 10)
      %li <strong>Hooks</strong> Connect various hooks to project builder. See <a href="#hooks">hooks section</a> for more information
      %li <strong>Hook name</strong> Set up unique hook name and POST to <code>http://bigtuna.domain/hooks/build/:name</code> to build the app

  %p
    After creating project you will be redirected to edit page, where you can set up various configurations. For example, you can test
    your project on different Ruby environments, versions, platforms, etc.

    %ul
      %li <strong>Name</strong> Name for a new configuration
      %li <strong>Steps</strong> Newline-separated build steps; see the <a href="#steps">steps section</a> for more details
  %p
    Please note, that BigTuna uses DelayedJob as a backend. This means that your jobs are ran by an external DelayedJob process. This
    process is maintained by script/delayed_job file.

    :coderay
      #!zsh
      RAILS_ENV=production ./script/delayed_job start

  %p
    Visit <a href="https://github.com/collectiveidea/delayed_job">Delayed Job’s GitHub page</a> for more information.

  %h3#steps Steps

  %p
    Steps should be newline—separated shell commands which will be executed in order by our builder. Sample Rails 3 step entry might
    look like this:

    :coderay
      #!zsh
      bundle install --path=%project_dir%/bundle --deployment
      cp /project/shared/database.yml.sample %build_dir%/config/database.yml
      bundle exec rake

  %p
    Please note that <code>%build_dir%</code> and <code>%project_dir%</code> are special variables.
    If used in a step, they will be replaced with appropriate paths.

  .alert.alert-block
    When building a web app, ensure your production data is safe. Use separate <code>database.yml</code> config file with only test
    environment entry as an extra precaution. That way you’ll make sure other databases aren’t accessed during the build process.

  %h3#vcs Version Control

  %p
    VCS Source is the path to your repository. It can either be a local path (like <code>/my/git/path</code>) if your repository is
    locally visible by BigTuna app, or a remote entry (like <code>your.host:repo.git</code>). In both cases it has to be accessible
    by the user which runs your BigTuna application. A remote entry will probably require a passwordless login, so an id_{r|d}sa.pub
    key has to be present on the remote site.

  %h3#hooks Hooks

  %p
    Hooks are small code parts that can be executed on various project actions. Currently supported actions are:

    %ul
      %li build_passed(build, config) — invoked when build was successfully ran
      %li build_fixed(build, config) — invoked when build fixed the failing project
      %li build_still_fails(build, config) — invoked when build didn’t fix the project
      %li build_finished(build, config) — invoked for every build ran
      %li build_failed(build, config) — invoked when build failed a valid project
  %p
    config in all hooks is a hash of configuration values. You can use it in hook actions to provide custom behaviour based on configuration provided by user.

  %p
    Currently there is a Mailer hook available, which allows you to send emails to specified recipients.
    If you would like to contribute learn <a href="contributing.html#hook">how to write your own hook</a>

%h2 bigtuna.yml

%p
  BigTuna has few configuration options which can be set up in config/bigtuna.yml file.

  :coderay
    #!yaml
    # config/bigtuna.yml
    test:
      read_only: false
      github_secure: "mytoken"
    production:
      read_only: true
      url_host: "bigtuna.yourdomain.com"


%h2 Host url

%p
  Set your host for links to work (mandatory in production!)

%h2 Read—only mode

%p
  We can work in read—only mode allowing only to view projects and builds. You can enable it by passing BIGTUNA_READONLY=1
  env variable while starting server. Also, there is a read_only configuration entry which you can set to boolean value.

%p
  The environment variable has a higher priority. By default the read—only option is disabled.

%h2 GitHub post—receive hook

%p
  You can set up github_secure token for BigTuna. Then in you GitHub project config set up post—receive hook to
  <code>big.tuna.host/hooks/build/github/:secure</code> and your projects will build automatically based on the repository url
  and branch name. By default this is disabled as token is not set.

